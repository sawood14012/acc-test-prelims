INFO: 2021/04/08 19:40:24 auth.go:16: To get Snyk Token, Please click https://app.snyk.io/redhat/snyk-token

[?25l[2K[1m[32mSnyk Token[0m [2m[Press Enter to continue][0m: â–ˆ
[1A[2K[2K
[?25h
INFO: 2021/04/08 19:40:24 auth.go:24: To get Snyk Token, Please click https://app.snyk.io/redhat/snyk-token

[?25l[2K[1m[32mSnyk Token[0m [2m[Press Enter to continue][0m: â–ˆ
[1A[2K[2K
[?25h
INFO: 2021/04/08 19:40:24 auth.go:34: To get Snyk Token, Please click https://app.snyk.io/redhat/snyk-token

[?25l[2K[1m[32mSnyk Token[0m [2m[Press Enter to continue][0m: â–ˆ
[1A[2K[2K
[?25h
INFO: 2021/04/08 19:40:24 common.go:161: 
INFO: 2021/04/08 19:40:24 common.go:168: Cli tool to interact with CRDA Platform. This tool performs token Authentication and verbose Analyses of Dependency Stack. 
	
	Authenticated token can be used as Auth Token to interact with CRDA Platform.

Usage:
  crda [command]

Available Commands:
  analyse     Get detailed report of vulnerabilities.
  auth        Links uuid with Snyk token.
  completion  Generate completion script
  help        Help about any command
  version     Get binary version.

Flags:
  -d, --debug      Sets Log level to Debug.
  -h, --help       help for crda
  -c, --no-color   Toggle colors in output.

Use "crda [command] --help" for more information about a command.

INFO: 2021/04/08 19:40:24 common.go:175: 
INFO: 2021/04/08 19:40:24 basic_commands.go:16: v0.1.0-6236425 darwin/amd64  BuildDate: Tue, 06 Apr 2021 16:34:32 IST  Vendor: Red Hat

INFO: 2021/04/08 19:40:24 basic_commands.go:39: Cli tool to interact with CRDA Platform. This tool performs token Authentication and verbose Analyses of Dependency Stack. 
	
	Authenticated token can be used as Auth Token to interact with CRDA Platform.

Usage:
  crda [command]

Available Commands:
  analyse     Get detailed report of vulnerabilities.
  auth        Links uuid with Snyk token.
  completion  Generate completion script
  help        Help about any command
  version     Get binary version.

Flags:
  -d, --debug      Sets Log level to Debug.
  -h, --help       help for crda
  -c, --no-color   Toggle colors in output.

Use "crda [command] --help" for more information about a command.

INFO: 2021/04/08 19:40:24 basic_commands.go:51: # bash completion for crda                                 -*- shell-script -*-

__crda_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__crda_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

__crda_index_of_word()
{
    local w word=$1
    shift
    index=0
    for w in "$@"; do
        [[ $w = "$word" ]] && return
        index=$((index+1))
    done
    index=-1
}

__crda_contains_word()
{
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
    return 1
}

__crda_handle_go_custom_completion()
{
    __crda_debug "${FUNCNAME[0]}: cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}"

    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local out requestComp lastParam lastChar comp directive args

    # Prepare the command to request completions for the program.
    # Calling ${words[0]} instead of directly crda allows to handle aliases
    args=("${words[@]:1}")
    requestComp="${words[0]} __completeNoDesc ${args[*]}"

    lastParam=${words[$((${#words[@]}-1))]}
    lastChar=${lastParam:$((${#lastParam}-1)):1}
    __crda_debug "${FUNCNAME[0]}: lastParam ${lastParam}, lastChar ${lastChar}"

    if [ -z "${cur}" ] && [ "${lastChar}" != "=" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go method.
        __crda_debug "${FUNCNAME[0]}: Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __crda_debug "${FUNCNAME[0]}: calling ${requestComp}"
    # Use eval to handle any environment variables and such
    out=$(eval "${requestComp}" 2>/dev/null)

    # Extract the directive integer at the very end of the output following a colon (:)
    directive=${out##*:}
    # Remove the directive
    out=${out%:*}
    if [ "${directive}" = "${out}" ]; then
        # There is not directive specified
        directive=0
    fi
    __crda_debug "${FUNCNAME[0]}: the completion directive is: ${directive}"
    __crda_debug "${FUNCNAME[0]}: the completions are: ${out[*]}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        # Error code.  No completion.
        __crda_debug "${FUNCNAME[0]}: received error from custom completion go code"
        return
    else
        if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __crda_debug "${FUNCNAME[0]}: activating no space"
                compopt -o nospace
            fi
        fi
        if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __crda_debug "${FUNCNAME[0]}: activating no file completion"
                compopt +o default
            fi
        fi
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local fullFilter filter filteringCmd
        # Do not use quotes around the $out variable or else newline
        # characters will be kept.
        for filter in ${out[*]}; do
            fullFilter+="$filter|"
        done

        filteringCmd="_filedir $fullFilter"
        __crda_debug "File filtering command: $filteringCmd"
        $filteringCmd
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subDir
        # Use printf to strip any trailing newline
        subdir=$(printf "%s" "${out[0]}")
        if [ -n "$subdir" ]; then
            __crda_debug "Listing directories in $subdir"
            __crda_handle_subdirs_in_dir_flag "$subdir"
        else
            __crda_debug "Listing directories in ."
            _filedir -d
        fi
    else
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${out[*]}" -- "$cur")
    fi
}

__crda_handle_reply()
{
    __crda_debug "${FUNCNAME[0]}"
    local comp
    case $cur in
        -*)
            if [[ $(type -t compopt) = "builtin" ]]; then
                compopt -o nospace
            fi
            local allflags
            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
                allflags=("${must_have_one_flag[@]}")
            else
                allflags=("${flags[*]} ${two_word_flags[*]}")
            fi
            while IFS='' read -r comp; do
                COMPREPLY+=("$comp")
            done < <(compgen -W "${allflags[*]}" -- "$cur")
            if [[ $(type -t compopt) = "builtin" ]]; then
                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
            fi

            # complete after --flag=abc
            if [[ $cur == *=* ]]; then
                if [[ $(type -t compopt) = "builtin" ]]; then
                    compopt +o nospace
                fi

                local index flag
                flag="${cur%=*}"
                __crda_index_of_word "${flag}" "${flags_with_completion[@]}"
                COMPREPLY=()
                if [[ ${index} -ge 0 ]]; then
                    PREFIX=""
                    cur="${cur#*=}"
                    ${flags_completion[${index}]}
                    if [ -n "${ZSH_VERSION}" ]; then
                        # zsh completion needs --flag= prefix
                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
                    fi
                fi
            fi
            return 0;
            ;;
    esac

    # check if we are handling a flag with special work handling
    local index
    __crda_index_of_word "${prev}" "${flags_with_completion[@]}"
    if [[ ${index} -ge 0 ]]; then
        ${flags_completion[${index}]}
        return
    fi

    # we are parsing a flag and don't have a special handler, no completion
    if [[ ${cur} != "${words[cword]}" ]]; then
        return
    fi

    local completions
    completions=("${commands[@]}")
    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
        completions+=("${must_have_one_noun[@]}")
    elif [[ -n "${has_completion_function}" ]]; then
        # if a go completion function is provided, defer to that function
        __crda_handle_go_custom_completion
    fi
    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
        completions+=("${must_have_one_flag[@]}")
    fi
    while IFS='' read -r comp; do
        COMPREPLY+=("$comp")
    done < <(compgen -W "${completions[*]}" -- "$cur")

    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${noun_aliases[*]}" -- "$cur")
    fi

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
		if declare -F __crda_custom_func >/dev/null; then
			# try command name qualified custom func
			__crda_custom_func
		else
			# otherwise fall back to unqualified for compatibility
			declare -F __custom_func >/dev/null && __custom_func
		fi
    fi

    # available in bash-completion >= 2, not always present on macOS
    if declare -F __ltrim_colon_completions >/dev/null; then
        __ltrim_colon_completions "$cur"
    fi

    # If there is only 1 completion and it is a flag with an = it will be completed
    # but we don't want a space after the =
    if [[ "${#COMPREPLY[@]}" -eq "1" ]] && [[ $(type -t compopt) = "builtin" ]] && [[ "${COMPREPLY[0]}" == --*= ]]; then
       compopt -o nospace
    fi
}

# The arguments should be in the form "ext1|ext2|extn"
__crda_handle_filename_extension_flag()
{
    local ext="$1"
    _filedir "@(${ext})"
}

__crda_handle_subdirs_in_dir_flag()
{
    local dir="$1"
    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
}

__crda_handle_flag()
{
    __crda_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    # if a command required a flag, and we found it, unset must_have_one_flag()
    local flagname=${words[c]}
    local flagvalue
    # if the word contained an =
    if [[ ${words[c]} == *"="* ]]; then
        flagvalue=${flagname#*=} # take in as flagvalue after the =
        flagname=${flagname%=*} # strip everything after the =
        flagname="${flagname}=" # but put the = back
    fi
    __crda_debug "${FUNCNAME[0]}: looking for ${flagname}"
    if __crda_contains_word "${flagname}" "${must_have_one_flag[@]}"; then
        must_have_one_flag=()
    fi

    # if you set a flag which only applies to this command, don't show subcommands
    if __crda_contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
      commands=()
    fi

    # keep flag value with flagname as flaghash
    # flaghash variable is an associative array which is only supported in bash > 3.
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        if [ -n "${flagvalue}" ] ; then
            flaghash[${flagname}]=${flagvalue}
        elif [ -n "${words[ $((c+1)) ]}" ] ; then
            flaghash[${flagname}]=${words[ $((c+1)) ]}
        else
            flaghash[${flagname}]="true" # pad "true" for bool flag
        fi
    fi

    # skip the argument to a two word flag
    if [[ ${words[c]} != *"="* ]] && __crda_contains_word "${words[c]}" "${two_word_flags[@]}"; then
			  __crda_debug "${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"
        c=$((c+1))
        # if we are looking for a flags value, don't show commands
        if [[ $c -eq $cword ]]; then
            commands=()
        fi
    fi

    c=$((c+1))

}

__crda_handle_noun()
{
    __crda_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    if __crda_contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
        must_have_one_noun=()
    elif __crda_contains_word "${words[c]}" "${noun_aliases[@]}"; then
        must_have_one_noun=()
    fi

    nouns+=("${words[c]}")
    c=$((c+1))
}

__crda_handle_command()
{
    __crda_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    local next_command
    if [[ -n ${last_command} ]]; then
        next_command="_${last_command}_${words[c]//:/__}"
    else
        if [[ $c -eq 0 ]]; then
            next_command="_crda_root_command"
        else
            next_command="_${words[c]//:/__}"
        fi
    fi
    c=$((c+1))
    __crda_debug "${FUNCNAME[0]}: looking for ${next_command}"
    declare -F "$next_command" >/dev/null && $next_command
}

__crda_handle_word()
{
    if [[ $c -ge $cword ]]; then
        __crda_handle_reply
        return
    fi
    __crda_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __crda_handle_flag
    elif __crda_contains_word "${words[c]}" "${commands[@]}"; then
        __crda_handle_command
    elif [[ $c -eq 0 ]]; then
        __crda_handle_command
    elif __crda_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __crda_handle_command
        else
            __crda_handle_noun
        fi
    else
        __crda_handle_noun
    fi
    __crda_handle_word
}

_crda_analyse()
{
    last_command="crda_analyse"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--json")
    flags+=("-j")
    local_nonpersistent_flags+=("--json")
    local_nonpersistent_flags+=("-j")
    flags+=("--verbose")
    flags+=("-v")
    local_nonpersistent_flags+=("--verbose")
    local_nonpersistent_flags+=("-v")
    flags+=("--debug")
    flags+=("-d")
    flags+=("--no-color")
    flags+=("-c")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_crda_auth()
{
    last_command="crda_auth"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--snyk-token=")
    two_word_flags+=("--snyk-token")
    two_word_flags+=("-t")
    local_nonpersistent_flags+=("--snyk-token")
    local_nonpersistent_flags+=("--snyk-token=")
    local_nonpersistent_flags+=("-t")
    flags+=("--debug")
    flags+=("-d")
    flags+=("--no-color")
    flags+=("-c")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_crda_completion()
{
    last_command="crda_completion"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--help")
    flags+=("-h")
    local_nonpersistent_flags+=("--help")
    local_nonpersistent_flags+=("-h")
    flags+=("--debug")
    flags+=("-d")
    flags+=("--no-color")
    flags+=("-c")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("bash")
    must_have_one_noun+=("fish")
    must_have_one_noun+=("powershell")
    must_have_one_noun+=("zsh")
    noun_aliases=()
}

_crda_help()
{
    last_command="crda_help"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("-d")
    flags+=("--no-color")
    flags+=("-c")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_crda_version()
{
    last_command="crda_version"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("-d")
    flags+=("--no-color")
    flags+=("-c")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_crda_root_command()
{
    last_command="crda"

    command_aliases=()

    commands=()
    commands+=("analyse")
    commands+=("auth")
    commands+=("completion")
    commands+=("help")
    commands+=("version")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--debug")
    flags+=("-d")
    flags+=("--no-color")
    flags+=("-c")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

__start_crda()
{
    local cur prev words cword
    declare -A flaghash 2>/dev/null || :
    declare -A aliashash 2>/dev/null || :
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -s || return
    else
        __crda_init_completion -n "=" || return
    fi

    local c=0
    local flags=()
    local two_word_flags=()
    local local_nonpersistent_flags=()
    local flags_with_completion=()
    local flags_completion=()
    local commands=("crda")
    local must_have_one_flag=()
    local must_have_one_noun=()
    local has_completion_function
    local last_command
    local nouns=()

    __crda_handle_word
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_crda crda
else
    complete -o default -o nospace -F __start_crda crda
fi

# ex: ts=4 sw=4 et filetype=sh

INFO: 2021/04/08 19:40:24 basic_commands.go:69: Get detailed report of vulnerabilities. Supported ecosystems are Pypi (Python), Maven (Java), Npm (Node) and Golang (Go).
If stack has Vulnerabilities, command will exit with status code 2.

Usage:
  crda analyse [flags]

Flags:
  -h, --help      help for analyse
  -j, --json      Set output format to JSON.
  -v, --verbose   Detailed Analyses Report.

Global Flags:
  -d, --debug      Sets Log level to Debug.
  -c, --no-color   Toggle colors in output.

INFO: 2021/04/08 19:40:24 basic_commands.go:75: Command maps Snyk Token with UUID and Outputs 'crda_key' for further Authentication.
	
	To get "Snyk Token" Please click here: https://app.snyk.io/redhat/snyk-token

Usage:
  crda auth [flags]

Flags:
  -h, --help                help for auth
  -t, --snyk-token string   Authenticate with Snyk Token to unlock Verbose stack anaylses.

Global Flags:
  -d, --debug      Sets Log level to Debug.
  -c, --no-color   Toggle colors in output.

INFO: 2021/04/08 19:40:24 basic_commands.go:82: To load completions:

	Bash:
	
	$ source <(yourprogram completion bash)
	
	# To load completions for each session, execute once:
	Linux:
	  $ yourprogram completion bash > /etc/bash_completion.d/yourprogram
	MacOS:
	  $ yourprogram completion bash > /usr/local/etc/bash_completion.d/yourprogram
	
	Zsh:
	
	# If shell completion is not already enabled in your environment you will need
	# to enable it.  You can execute the following once:
	
	$ echo "autoload -U compinit; compinit" >> ~/.zshrc
	
	# To load completions for each session, execute once:
	$ yourprogram completion zsh > "${fpath[1]}/_yourprogram"
	
	# You will need to start a new shell for this setup to take effect.
	
	Fish:
	
	$ yourprogram completion fish | source
	
	# To load completions for each session, execute once:
	$ yourprogram completion fish > ~/.config/fish/completions/yourprogram.fish

Usage:
  crda completion [bash|zsh|fish|powershell]

Flags:
  -h, --help   help for completion

Global Flags:
  -d, --debug      Sets Log level to Debug.
  -c, --no-color   Toggle colors in output.

INFO: 2021/04/08 19:40:24 basic_commands.go:89: Command to output version of a binary.

Usage:
  crda version [flags]

Flags:
  -h, --help   help for version

Global Flags:
  -d, --debug      Sets Log level to Debug.
  -c, --no-color   Toggle colors in output.

INFO: 2021/04/08 19:40:24 basic_commands.go:96: Cli tool to interact with CRDA Platform. This tool performs token Authentication and verbose Analyses of Dependency Stack. 
	
	Authenticated token can be used as Auth Token to interact with CRDA Platform.

Usage:
  crda [command]

Available Commands:
  analyse     Get detailed report of vulnerabilities.
  auth        Links uuid with Snyk token.
  completion  Generate completion script
  help        Help about any command
  version     Get binary version.

Flags:
  -d, --debug      Sets Log level to Debug.
  -h, --help       help for crda
  -c, --no-color   Toggle colors in output.

Use "crda [command] --help" for more information about a command.

INFO: 2021/04/08 19:40:24 basic_commands.go:106: 
INFO: 2021/04/08 19:40:24 common.go:248: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/go.mod.template
INFO: 2021/04/08 19:40:24 common.go:249: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/go.mod
INFO: 2021/04/08 19:40:24 common.go:263: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/main.go.template
INFO: 2021/04/08 19:40:24 common.go:264: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/main.go
INFO: 2021/04/08 19:40:24 common.go:58: 
:21 common.go:77: Analysing your Dependency Stack! Please wait...
Summary Report for Analyses:

[97;1mTotal Scanned Dependencies: [0m[97;1m4[0m
[97;1mTotal Scanned Transitive Dependencies: [0m[97;1m259[0m
[97;1mDirect Vulnerable Dependencies: [0m[97;1m1[0m
[97;1mTotal Vulnerabilities: [0m[97;1m1[0m
[97;1mCommonly Known Vulnerabilities: [0m[97;1m1[0m
[97;1mVulnerabilities Unique to Snyk: [0m[97;1m0[0m
[91;1mCritical Vulnerabilities: [0m[91;1m0[0m
[95;1mHigh Vulnerabilities: [0m[95;1m1[0m
[93;1mMedium Vulnerabilities: [0m[93;1m0[0m
[94;1mLow Vulnerabilities: [0m[94;1m0[0m

[97;1mFull Report: [0mhttps://recommender.api.openshift.io/api/v2/stack-report/2ecec01332e5414489eb1429c8ac0139

(Powered by Snyk)

tip: Use --verbose for detailed report.

INFO: 2021/04/08 18:54:21 common.go:248: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/go.mod.template
INFO: 2021/04/08 18:54:21 common.go:249: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/go.mod
INFO: 2021/04/08 18:54:21 common.go:263: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/main.go.template
INFO: 2021/04/08 18:54:21 common.go:264: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/main.go
INFO: 2021/04/08 18:54:21 common.go:58: 
INFO: 2021/04/08 18:54:29 common.go:273: Analysing your Dependency Stack! Please wait...
Summary Report for Analyses:

[97;1mTotal Scanned Dependencies: [0m[97;1m4[0m
[97;1mTotal Scanned Transitive Dependencies: [0m[97;1m259[0m
[97;1mDirect Vulnerable Dependencies: [0m[97;1m1[0m
[97;1mTotal Vulnerabilities: [0m[97;1m1[0m
[97;1mCommonly Known Vulnerabilities: [0m[97;1m1[0m
[97;1mVulnerabilities Unique to Snyk: [0m[97;1m0[0m
[91;1mCritical Vulnerabilities: [0m[91;1m0[0m
[95;1mHigh Vulnerabilities: [0m[95;1m1[0m
[93;1mMedium Vulnerabilities: [0m[93;1m0[0m
[94;1mLow Vulnerabilities: [0m[94;1m0[0m

[97;1mFull Report: [0mhttps://recommender.api.openshift.io/api/v2/stack-report/d41d5f8a70c4426394df1a17ce493e58

(Powered by Snyk)

tip: Use --verbose for detailed report.

INFO: 2021/04/08 18:54:29 common.go:248: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/pom.xml
INFO: 2021/04/08 18:54:29 common.go:249: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/pom.xml
INFO: 2021/04/08 18:54:39 common.go:77: Analysing your Dependency Stack! Please wait...
Summary Report for Analyses:

[97;1mTotal Scanned Dependencies: [0m[97;1m1[0m
[97;1mTotal Scanned Transitive Dependencies: [0m[97;1m0[0m
[97;1mDirect Vulnerable Dependencies: [0m[97;1m0[0m
[97;1mTotal Vulnerabilities: [0m[97;1m0[0m
[97;1mCommonly Known Vulnerabilities: [0m[97;1m0[0m
[97;1mVulnerabilities Unique to Snyk: [0m[97;1m0[0m
[91;1mCritical Vulnerabilities: [0m[91;1m0[0m
[95;1mHigh Vulnerabilities: [0m[95;1m0[0m
[93;1mMedium Vulnerabilities: [0m[93;1m0[0m
[94;1mLow Vulnerabilities: [0m[94;1m0[0m

[97;1mFull Report: [0mhttps://recommender.api.openshift.io/api/v2/stack-report/ee1d760902944f7584bac0211de2ad86

(Powered by Snyk)

tip: Use --verbose for detailed report.

INFO: 2021/04/08 18:54:39 common.go:248: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/pom.xml
INFO: 2021/04/08 18:54:39 common.go:249: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/pom.xml
INFO: 2021/04/08 18:54:48 common.go:273: Analysing your Dependency Stack! Please wait...
Summary Report for Analyses:

[97;1mTotal Scanned Dependencies: [0m[97;1m1[0m
[97;1mTotal Scanned Transitive Dependencies: [0m[97;1m0[0m
[97;1mDirect Vulnerable Dependencies: [0m[97;1m0[0m
[97;1mTotal Vulnerabilities: [0m[97;1m0[0m
[97;1mCommonly Known Vulnerabilities: [0m[97;1m0[0m
[97;1mVulnerabilities Unique to Snyk: [0m[97;1m0[0m
[91;1mCritical Vulnerabilities: [0m[91;1m0[0m
[95;1mHigh Vulnerabilities: [0m[95;1m0[0m
[93;1mMedium Vulnerabilities: [0m[93;1m0[0m
[94;1mLow Vulnerabilities: [0m[94;1m0[0m

[97;1mFull Report: [0mhttps://recommender.api.openshift.io/api/v2/stack-report/f4dd4792b04444e2932df735153fc49d

(Powered by Snyk)

tip: Use --verbose for detailed report.

INFO: 2021/04/08 18:54:48 common.go:248: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/package.json
INFO: 2021/04/08 18:54:48 common.go:249: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/package.json
INFO: 2021/04/08 18:55:38 common.go:48: added 34 packages from 84 contributors and audited 34 packages in 49.033s
found 6 vulnerabilities (1 low, 2 moderate, 3 high)
  run `npm audit fix` to fix them, or `npm audit` for details

INFO: 2021/04/08 18:55:46 common.go:77: Analysing your Dependency Stack! Please wait...
Summary Report for Analyses:

[97;1mTotal Scanned Dependencies: [0m[97;1m8[0m
[97;1mTotal Scanned Transitive Dependencies: [0m[97;1m25[0m
[97;1mDirect Vulnerable Dependencies: [0m[97;1m3[0m
[97;1mTotal Vulnerabilities: [0m[97;1m6[0m
[97;1mCommonly Known Vulnerabilities: [0m[97;1m5[0m
[97;1mVulnerabilities Unique to Snyk: [0m[97;1m1[0m
[91;1mCritical Vulnerabilities: [0m[91;1m0[0m
[95;1mHigh Vulnerabilities: [0m[95;1m1[0m
[93;1mMedium Vulnerabilities: [0m[93;1m5[0m
[94;1mLow Vulnerabilities: [0m[94;1m0[0m

[97;1mFull Report: [0mhttps://recommender.api.openshift.io/api/v2/stack-report/6e4251aec0764335a1d82603aa5d06c9

(Powered by Snyk)

tip: Use --verbose for detailed report.

INFO: 2021/04/08 18:55:47 common.go:248: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/package.json
INFO: 2021/04/08 18:55:47 common.go:249: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/package.json
INFO: 2021/04/08 18:55:51 common.go:48: added 34 packages from 84 contributors and audited 34 packages in 3.497s
found 6 vulnerabilities (1 low, 2 moderate, 3 high)
  run `npm audit fix` to fix them, or `npm audit` for details

INFO: 2021/04/08 18:55:58 common.go:273: Analysing your Dependency Stack! Please wait...
Summary Report for Analyses:

[97;1mTotal Scanned Dependencies: [0m[97;1m8[0m
[97;1mTotal Scanned Transitive Dependencies: [0m[97;1m25[0m
[97;1mDirect Vulnerable Dependencies: [0m[97;1m3[0m
[97;1mTotal Vulnerabilities: [0m[97;1m6[0m
[97;1mCommonly Known Vulnerabilities: [0m[97;1m5[0m
[97;1mVulnerabilities Unique to Snyk: [0m[97;1m1[0m
[91;1mCritical Vulnerabilities: [0m[91;1m0[0m
[95;1mHigh Vulnerabilities: [0m[95;1m1[0m
[93;1mMedium Vulnerabilities: [0m[93;1m5[0m
[94;1mLow Vulnerabilities: [0m[94;1m0[0m

[97;1mFull Report: [0mhttps://recommender.api.openshift.io/api/v2/stack-report/ac8d6ea5e3a54c4ca3417e9d371ab88c

(Powered by Snyk)

tip: Use --verbose for detailed report.

INFO: 2021/04/08 18:55:59 common.go:248: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/requirements.txt
INFO: 2021/04/08 18:55:59 common.go:249: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/requirements.txt
INFO: 2021/04/08 18:56:20 common.go:32: Collecting flask==0.12
  Using cached Flask-0.12-py2.py3-none-any.whl (82 kB)
Collecting fastapi==0.36.0
  Using cached fastapi-0.36.0-py3-none-any.whl (157 kB)
Collecting sceptre==2.2.1
  Using cached sceptre-2.2.1-py2.py3-none-any.whl (58 kB)
Collecting Jinja2>=2.4
  Using cached Jinja2-2.11.3-py2.py3-none-any.whl (125 kB)
Collecting itsdangerous>=0.21
  Using cached itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting click>=2.0
  Using cached click-7.1.2-py2.py3-none-any.whl (82 kB)
Collecting Werkzeug>=0.7
  Using cached Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
Collecting pydantic<=0.30.0,>=0.30
  Using cached pydantic-0.30-py36.py37.py38-none-any.whl (60 kB)
Processing /Users/sawood/Library/Caches/pip/wheels/57/95/3e/4c51fe5b0cf229a82bddf536dead568dc32185db49ba061768/starlette-0.12.7-py3-none-any.whl
Processing /Users/sawood/Library/Caches/pip/wheels/35/f3/15/01aa6571f0a72ee6ae7b827c1491c37a1f72d686fd22b43b0e/typing-3.7.4.3-py3-none-any.whl
Collecting colorama==0.3.9
  Using cached colorama-0.3.9-py2.py3-none-any.whl (20 kB)
Collecting six<2.0.0,>=1.11.0
  Using cached six-1.15.0-py2.py3-none-any.whl (10 kB)
Processing /Users/sawood/Library/Caches/pip/wheels/f4/51/cc/858604f7bb9cab887106ff266a541546ad783b4fa20875051d/PyYAML-5.4.1-cp37-cp37m-macosx_11_0_x86_64.whl
Collecting boto3<2.0,>=1.3
  Using cached boto3-1.17.47-py2.py3-none-any.whl (131 kB)
Processing /Users/sawood/Library/Caches/pip/wheels/48/b1/c4/94ca0cdd84961331402e857d562d9822ccfcb0567c3d064bf2/networkx-2.1-py2.py3-none-any.whl
Collecting packaging==16.8
  Using cached packaging-16.8-py2.py3-none-any.whl (23 kB)
Collecting MarkupSafe>=0.23
  Using cached MarkupSafe-1.1.1.tar.gz (19 kB)
Collecting jmespath<1.0.0,>=0.7.1
  Using cached jmespath-0.10.0-py2.py3-none-any.whl (24 kB)
Collecting botocore<1.21.0,>=1.20.47
  Using cached botocore-1.20.47-py2.py3-none-any.whl (7.4 MB)
Collecting s3transfer<0.4.0,>=0.3.0
  Using cached s3transfer-0.3.6-py2.py3-none-any.whl (73 kB)
Collecting decorator>=4.1.0
  Using cached decorator-5.0.6-py3-none-any.whl (8.8 kB)
Collecting pyparsing
  Using cached pyparsing-2.4.7-py2.py3-none-any.whl (67 kB)
Collecting urllib3<1.27,>=1.25.4
  Using cached urllib3-1.26.4-py2.py3-none-any.whl (153 kB)
Collecting python-dateutil<3.0.0,>=2.1
  Using cached python_dateutil-2.8.1-py2.py3-none-any.whl (227 kB)
Using legacy setup.py install for MarkupSafe, since package 'wheel' is not installed.
Installing collected packages: MarkupSafe, Jinja2, itsdangerous, click, Werkzeug, flask, pydantic, starlette, fastapi, typing, colorama, six, PyYaml, jmespath, urllib3, python-dateutil, botocore, s3transfer, boto3, decorator, networkx, pyparsing, packaging, sceptre
    Running setup.py install for MarkupSafe: started
    Running setup.py install for MarkupSafe: finished with status 'done'
Successfully installed Jinja2-2.11.3 MarkupSafe-1.1.1 PyYaml-5.4.1 Werkzeug-1.0.1 boto3-1.17.47 botocore-1.20.47 click-7.1.2 colorama-0.3.9 decorator-5.0.6 fastapi-0.36.0 flask-0.12 itsdangerous-1.1.0 jmespath-0.10.0 networkx-2.1 packaging-16.8 pydantic-0.30 pyparsing-2.4.7 python-dateutil-2.8.1 s3transfer-0.3.6 sceptre-2.2.1 six-1.15.0 starlette-0.12.7 typing-3.7.4.3 urllib3-1.26.4

INFO: 2021/04/08 18:56:28 common.go:85: Analysing your Dependency Stack! Please wait...
Summary Report for Analyses:

[97;1mTotal Scanned Dependencies: [0m[97;1m2[0m
[97;1mTotal Scanned Transitive Dependencies: [0m[97;1m7[0m
[97;1mDirect Vulnerable Dependencies: [0m[97;1m2[0m
[97;1mTotal Vulnerabilities: [0m[97;1m2[0m
[97;1mCommonly Known Vulnerabilities: [0m[97;1m1[0m
[97;1mVulnerabilities Unique to Snyk: [0m[97;1m1[0m
[91;1mCritical Vulnerabilities: [0m[91;1m0[0m
[95;1mHigh Vulnerabilities: [0m[95;1m1[0m
[93;1mMedium Vulnerabilities: [0m[93;1m1[0m
[94;1mLow Vulnerabilities: [0m[94;1m0[0m

[97;1mFull Report: [0mhttps://recommender.api.openshift.io/api/v2/stack-report/afb3d1caa69642d28654b95c62e205a2

(Powered by Snyk)

tip: Use --verbose for detailed report.

INFO: 2021/04/08 18:56:29 common.go:248: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/manifests/requirements.txt
INFO: 2021/04/08 18:56:29 common.go:249: /Users/sawood/go/src/github.com/fabric8-analytics/acceptance_tests/data/requirements.txt
INFO: 2021/04/08 18:56:49 common.go:32: Collecting flask==0.12
  Using cached Flask-0.12-py2.py3-none-any.whl (82 kB)
Collecting fastapi==0.36.0
  Using cached fastapi-0.36.0-py3-none-any.whl (157 kB)
Collecting sceptre==2.2.1
  Using cached sceptre-2.2.1-py2.py3-none-any.whl (58 kB)
Collecting Werkzeug>=0.7
  Using cached Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
Collecting click>=2.0
  Using cached click-7.1.2-py2.py3-none-any.whl (82 kB)
Collecting Jinja2>=2.4
  Using cached Jinja2-2.11.3-py2.py3-none-any.whl (125 kB)
Collecting itsdangerous>=0.21
  Using cached itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting pydantic<=0.30.0,>=0.30
  Using cached pydantic-0.30-py36.py37.py38-none-any.whl (60 kB)
Processing /Users/sawood/Library/Caches/pip/wheels/57/95/3e/4c51fe5b0cf229a82bddf536dead568dc32185db49ba061768/starlette-0.12.7-py3-none-any.whl
Collecting boto3<2.0,>=1.3
  Using cached boto3-1.17.47-py2.py3-none-any.whl (131 kB)
Collecting packaging==16.8
  Using cached packaging-16.8-py2.py3-none-any.whl (23 kB)
Processing /Users/sawood/Library/Caches/pip/wheels/48/b1/c4/94ca0cdd84961331402e857d562d9822ccfcb0567c3d064bf2/networkx-2.1-py2.py3-none-any.whl
Processing /Users/sawood/Library/Caches/pip/wheels/f4/51/cc/858604f7bb9cab887106ff266a541546ad783b4fa20875051d/PyYAML-5.4.1-cp37-cp37m-macosx_11_0_x86_64.whl
Processing /Users/sawood/Library/Caches/pip/wheels/35/f3/15/01aa6571f0a72ee6ae7b827c1491c37a1f72d686fd22b43b0e/typing-3.7.4.3-py3-none-any.whl
Collecting six<2.0.0,>=1.11.0
  Using cached six-1.15.0-py2.py3-none-any.whl (10 kB)
Collecting colorama==0.3.9
  Using cached colorama-0.3.9-py2.py3-none-any.whl (20 kB)
Collecting MarkupSafe>=0.23
  Using cached MarkupSafe-1.1.1.tar.gz (19 kB)
Collecting jmespath<1.0.0,>=0.7.1
  Using cached jmespath-0.10.0-py2.py3-none-any.whl (24 kB)
Collecting s3transfer<0.4.0,>=0.3.0
  Using cached s3transfer-0.3.6-py2.py3-none-any.whl (73 kB)
Collecting botocore<1.21.0,>=1.20.47
  Using cached botocore-1.20.47-py2.py3-none-any.whl (7.4 MB)
Collecting pyparsing
  Using cached pyparsing-2.4.7-py2.py3-none-any.whl (67 kB)
Collecting decorator>=4.1.0
  Using cached decorator-5.0.6-py3-none-any.whl (8.8 kB)
Collecting urllib3<1.27,>=1.25.4
  Using cached urllib3-1.26.4-py2.py3-none-any.whl (153 kB)
Collecting python-dateutil<3.0.0,>=2.1
  Using cached python_dateutil-2.8.1-py2.py3-none-any.whl (227 kB)
Using legacy setup.py install for MarkupSafe, since package 'wheel' is not installed.
Installing collected packages: Werkzeug, click, MarkupSafe, Jinja2, itsdangerous, flask, pydantic, starlette, fastapi, jmespath, urllib3, six, python-dateutil, botocore, s3transfer, boto3, pyparsing, packaging, decorator, networkx, PyYaml, typing, colorama, sceptre
    Running setup.py install for MarkupSafe: started
    Running setup.py install for MarkupSafe: finished with status 'done'
Successfully installed Jinja2-2.11.3 MarkupSafe-1.1.1 PyYaml-5.4.1 Werkzeug-1.0.1 boto3-1.17.47 botocore-1.20.47 click-7.1.2 colorama-0.3.9 decorator-5.0.6 fastapi-0.36.0 flask-0.12 itsdangerous-1.1.0 jmespath-0.10.0 networkx-2.1 packaging-16.8 pydantic-0.30 pyparsing-2.4.7 python-dateutil-2.8.1 s3transfer-0.3.6 sceptre-2.2.1 six-1.15.0 starlette-0.12.7 typing-3.7.4.3 urllib3-1.26.4

INFO: 2021/04/08 18:56:57 common.go:273: Analysing your Dependency Stack! Please wait...
Summary Report for Analyses:

[97;1mTotal Scanned Dependencies: [0m[97;1m0[0m
[97;1mTotal Scanned Transitive Dependencies: [0m[97;1m0[0m
[97;1mDirect Vulnerable Dependencies: [0m[97;1m0[0m
[97;1mTotal Vulnerabilities: [0m[97;1m0[0m
[97;1mCommonly Known Vulnerabilities: [0m[97;1m0[0m
[97;1mVulnerabilities Unique to Snyk: [0m[97;1m0[0m
[91;1mCritical Vulnerabilities: [0m[91;1m0[0m
[95;1mHigh Vulnerabilities: [0m[95;1m0[0m
[93;1mMedium Vulnerabilities: [0m[93;1m0[0m
[94;1mLow Vulnerabilities: [0m[94;1m0[0m

[97;1mFull Report: [0mhttps://recommender.api.openshift.io/api/v2/stack-report/5b9d8c4360b24906b7579e05908b73e0

(Powered by Snyk)

tip: Use --verbose for detailed report.

